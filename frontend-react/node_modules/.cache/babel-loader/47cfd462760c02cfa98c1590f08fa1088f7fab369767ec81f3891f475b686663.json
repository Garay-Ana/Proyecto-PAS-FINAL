{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabyg\\\\Downloads\\\\prueba este si\\\\prueba\\\\frontend-react\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport StatsContainer from './StatsContainer';\nimport Controls from './Controls';\nimport DataSection from './DataSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://proyecto-pas-final.onrender.com/api/historial';\nconst API_REMOTO_URL = 'https://proyecto-pas-final.onrender.com/api/historial-entradas';\nfunction Dashboard() {\n  _s();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isOnline, setIsOnline] = useState(true);\n  function getTimeAgo(dateString) {\n    const now = new Date();\n    const past = new Date(dateString);\n    const diffMs = now - past;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n    if (diffMins < 1) return 'Ahora mismo';\n    if (diffMins < 60) return `${diffMins} min`;\n    if (diffHours < 24) return `${diffHours}h ${diffMins % 60}m`;\n    return `${diffDays}d ${diffHours % 24}h`;\n  }\n  function updateStats(data) {\n    const totalEntries = data.length;\n    const today = new Date().toDateString();\n    const todayEntries = data.filter(entry => {\n      const dateToCheck = entry.timestamp || entry.fecha_hora;\n      return new Date(dateToCheck).toDateString() === today;\n    }).length;\n    const uniqueCards = [...new Set(data.filter(entry => entry.uid).map(entry => entry.uid))].length;\n    const lastEntry = data.length > 0 ? new Date(data[data.length - 1].timestamp || data[data.length - 1].fecha_hora).toLocaleTimeString('es-ES', {\n      hour: '2-digit',\n      minute: '2-digit'\n    }) : '--:--';\n    return {\n      totalEntries,\n      todayEntries,\n      uniqueCards,\n      lastEntry\n    };\n  }\n  async function loadData() {\n    setIsLoading(true);\n    setError('');\n    try {\n      const [responseFisico, responseRemoto] = await Promise.all([fetch(API_URL), fetch(API_REMOTO_URL)]);\n      if (!responseFisico.ok) {\n        throw new Error(`Error del servidor físico: ${responseFisico.status}`);\n      }\n      if (!responseRemoto.ok) {\n        throw new Error(`Error del servidor remoto: ${responseRemoto.status}`);\n      }\n      const jsonDataFisico = await responseFisico.json();\n      const jsonDataRemoto = await responseRemoto.json();\n\n      // Mapear datos remotos para que tengan las mismas propiedades que los físicos para facilitar el render\n      const mappedRemoto = jsonDataRemoto.map(entry => ({\n        uid: null,\n        nombre: entry.nombre,\n        apellido: entry.apellido,\n        timestamp: entry.fecha_hora\n      }));\n      const combinedData = [...jsonDataFisico, ...mappedRemoto];\n      // Ordenar por fecha descendente\n      combinedData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      setData(combinedData);\n      setIsOnline(true);\n    } catch (err) {\n      setError(`No se pudieron cargar los datos: ${err.message}`);\n      setIsOnline(false);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  useEffect(() => {\n    loadData();\n    const intervalLoad = setInterval(loadData, 30000);\n    const intervalUpdate = setInterval(() => {\n      setData(currentData => [...currentData]);\n    }, 60000);\n    return () => {\n      clearInterval(intervalLoad);\n      clearInterval(intervalUpdate);\n    };\n  }, []);\n  const stats = updateStats(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsContainer, {\n      totalEntries: stats.totalEntries,\n      todayEntries: stats.todayEntries,\n      uniqueCards: stats.uniqueCards,\n      lastEntry: stats.lastEntry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      isOnline: isOnline,\n      statusMessage: error,\n      onRefresh: loadData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSection, {\n      data: data,\n      isLoading: isLoading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"V63F9zqaFFaju+6AmaMzdQyaASE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Header","StatsContainer","Controls","DataSection","jsxDEV","_jsxDEV","API_URL","API_REMOTO_URL","Dashboard","_s","data","setData","isLoading","setIsLoading","error","setError","isOnline","setIsOnline","getTimeAgo","dateString","now","Date","past","diffMs","diffMins","Math","floor","diffHours","diffDays","updateStats","totalEntries","length","today","toDateString","todayEntries","filter","entry","dateToCheck","timestamp","fecha_hora","uniqueCards","Set","uid","map","lastEntry","toLocaleTimeString","hour","minute","loadData","responseFisico","responseRemoto","Promise","all","fetch","ok","Error","status","jsonDataFisico","json","jsonDataRemoto","mappedRemoto","nombre","apellido","combinedData","sort","a","b","err","message","intervalLoad","setInterval","intervalUpdate","currentData","clearInterval","stats","className","children","fileName","_jsxFileName","lineNumber","columnNumber","statusMessage","onRefresh","_c","$RefreshReg$"],"sources":["C:/Users/gabyg/Downloads/prueba este si/prueba/frontend-react/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport StatsContainer from './StatsContainer';\r\nimport Controls from './Controls';\r\nimport DataSection from './DataSection';\r\n\r\nconst API_URL = 'https://proyecto-pas-final.onrender.com/api/historial';\r\nconst API_REMOTO_URL = 'https://proyecto-pas-final.onrender.com/api/historial-entradas';\r\n\r\nfunction Dashboard() {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [isOnline, setIsOnline] = useState(true);\r\n\r\n  function getTimeAgo(dateString) {\r\n    const now = new Date();\r\n    const past = new Date(dateString);\r\n    const diffMs = now - past;\r\n    const diffMins = Math.floor(diffMs / 60000);\r\n    const diffHours = Math.floor(diffMins / 60);\r\n    const diffDays = Math.floor(diffHours / 24);\r\n\r\n    if (diffMins < 1) return 'Ahora mismo';\r\n    if (diffMins < 60) return `${diffMins} min`;\r\n    if (diffHours < 24) return `${diffHours}h ${diffMins % 60}m`;\r\n    return `${diffDays}d ${diffHours % 24}h`;\r\n  }\r\n\r\n  function updateStats(data) {\r\n    const totalEntries = data.length;\r\n    const today = new Date().toDateString();\r\n    const todayEntries = data.filter(entry => {\r\n      const dateToCheck = entry.timestamp || entry.fecha_hora;\r\n      return new Date(dateToCheck).toDateString() === today;\r\n    }).length;\r\n\r\n    const uniqueCards = [...new Set(data.filter(entry => entry.uid).map(entry => entry.uid))].length;\r\n    const lastEntry = data.length > 0 ?\r\n      new Date(data[data.length - 1].timestamp || data[data.length - 1].fecha_hora).toLocaleTimeString('es-ES', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      }) : '--:--';\r\n\r\n    return { totalEntries, todayEntries, uniqueCards, lastEntry };\r\n  }\r\n\r\n  async function loadData() {\r\n    setIsLoading(true);\r\n    setError('');\r\n    try {\r\n      const [responseFisico, responseRemoto] = await Promise.all([\r\n        fetch(API_URL),\r\n        fetch(API_REMOTO_URL)\r\n      ]);\r\n      if (!responseFisico.ok) {\r\n        throw new Error(`Error del servidor físico: ${responseFisico.status}`);\r\n      }\r\n      if (!responseRemoto.ok) {\r\n        throw new Error(`Error del servidor remoto: ${responseRemoto.status}`);\r\n      }\r\n      const jsonDataFisico = await responseFisico.json();\r\n      const jsonDataRemoto = await responseRemoto.json();\r\n\r\n      // Mapear datos remotos para que tengan las mismas propiedades que los físicos para facilitar el render\r\n      const mappedRemoto = jsonDataRemoto.map(entry => ({\r\n        uid: null,\r\n        nombre: entry.nombre,\r\n        apellido: entry.apellido,\r\n        timestamp: entry.fecha_hora\r\n      }));\r\n\r\n      const combinedData = [...jsonDataFisico, ...mappedRemoto];\r\n      // Ordenar por fecha descendente\r\n      combinedData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n\r\n      setData(combinedData);\r\n      setIsOnline(true);\r\n    } catch (err) {\r\n      setError(`No se pudieron cargar los datos: ${err.message}`);\r\n      setIsOnline(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    const intervalLoad = setInterval(loadData, 30000);\r\n    const intervalUpdate = setInterval(() => {\r\n      setData(currentData => [...currentData]);\r\n    }, 60000);\r\n    return () => {\r\n      clearInterval(intervalLoad);\r\n      clearInterval(intervalUpdate);\r\n    };\r\n  }, []);\r\n\r\n  const stats = updateStats(data);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <StatsContainer\r\n        totalEntries={stats.totalEntries}\r\n        todayEntries={stats.todayEntries}\r\n        uniqueCards={stats.uniqueCards}\r\n        lastEntry={stats.lastEntry}\r\n      />\r\n      <Controls\r\n        isOnline={isOnline}\r\n        statusMessage={error}\r\n        onRefresh={loadData}\r\n      />\r\n      <DataSection\r\n        data={data}\r\n        isLoading={isLoading}\r\n        error={error}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}